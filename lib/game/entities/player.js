// Generated by CoffeeScript 1.4.0
(function() {
  /*;

  var EntityPlayer;

  EntityPlayer = {};

  */;


  ig.module('game.entities.player').requires('game.entities.common.base-entity', 'game.entities.inventory', 'game.entities.weapons.axe').defines(function() {
    return EntityPlayer = EntityBaseEntity.extend({
      size: {
        x: 10,
        y: 13
      },
      offset: {
        x: 2,
        y: 6
      },
      collides: ig.Entity.COLLIDES.ACTIVE,
      type: ig.Entity.TYPE.A,
      animSheet: new ig.AnimationSheet('media/characters/hero_v2.png', 14, 19),
      name: 'player',
      states: {
        DEFAULT: 1,
        IN_INVENTORY: 2
      },
      state: null,
      facing: 'Down',
      velocity: 300,
      maxVel: {
        x: 500,
        y: 500
      },
      idleAnimSpeed: 1,
      movingAnimSpeed: 0.06,
      movementAllowed: true,
      inventory: null,
      init: function(x, y, settings) {
        this.addAnim('idleDown', this.idleAnimSpeed, [0]);
        this.addAnim('idleUp', this.idleAnimSpeed, [3]);
        this.addAnim('idleRight', this.idleAnimSpeed, [6]);
        this.addAnim('idleLeft', this.idleAnimSpeed, [9]);
        this.addAnim('walkDown', this.movingAnimSpeed, [0, 1, 0, 2]);
        this.addAnim('walkUp', this.movingAnimSpeed, [3, 4, 3, 5]);
        this.addAnim('walkRight', this.movingAnimSpeed, [6, 7, 6, 8]);
        this.addAnim('walkLeft', this.movingAnimSpeed, [9, 10, 9, 11]);
        this.state = this.states.DEFAULT;
        if (!ig.global.wm) {
          this.inventory = ig.game.spawnEntity(EntityInventory);
          this.inventory.pos.x = (ig.system.width - this.inventory.size.x) / 2;
          this.inventory.pos.y = (ig.system.height - this.inventory.size.y) / 2;
        }
        this.parent(x, y, settings);
        return ig.game.player = this;
      },
      update: function() {
        this.handleButtons();
        return this.parent();
      },
      draw: function() {
        if (!ig.global.wm) {
          this.zIndex = parseInt(this.pos.y + this.size.y);
          ig.game.sortEntitiesDeferred();
          this.inventory.isVisible = this.state === this.states.IN_INVENTORY;
        }
        return this.parent();
      },
      handleButtons: function() {
        /* Inventory/Menu Navigation
        */

        var axe;
        if (ig.input.pressed('inventory')) {
          this.currentAnim = this.anims['idle' + this.facing];
          this.vel.x = 0;
          this.vel.y = 0;
          if (this.state === this.states.IN_INVENTORY) {
            this.movementAllowed = true;
            this.state = this.states.DEFAULT;
          } else {
            this.movementAllowed = false;
            this.state = this.states.IN_INVENTORY;
          }
        }
        if (!this.movementAllowed) {
          return;
        }
        /* Weapons
        */

        if (ig.input.pressed('attack')) {
          axe = ig.game.spawnEntity('EntityAxe');
          axe.pos = this.getWeaponCoordinates(axe);
        }
        /* Movement
        */

        if (ig.input.state('up')) {
          this.currentAnim = this.anims.walkUp;
          this.facing = 'Up';
          this.vel.x = 0;
          this.vel.y = -this.velocity;
          if (ig.input.state('right')) {
            return this.vel.x = this.velocity;
          } else if (ig.input.state('left')) {
            return this.vel.x = -this.velocity;
          }
        } else if (ig.input.state('down')) {
          this.currentAnim = this.anims.walkDown;
          this.facing = 'Down';
          this.vel.x = 0;
          this.vel.y = this.velocity;
          if (ig.input.state('right')) {
            return this.vel.x = this.velocity;
          } else if (ig.input.state('left')) {
            return this.vel.x = -this.velocity;
          }
        } else if (ig.input.state('left')) {
          this.currentAnim = this.anims.walkLeft;
          this.facing = 'Left';
          this.vel.x = -this.velocity;
          return this.vel.y = 0;
        } else if (ig.input.state('right')) {
          this.currentAnim = this.anims.walkRight;
          this.facing = 'Right';
          this.vel.x = this.velocity;
          return this.vel.y = 0;
        } else {
          this.currentAnim = this.anims['idle' + this.facing];
          this.vel.x = 0;
          return this.vel.y = 0;
        }
      },
      getWeaponCoordinates: function(weaponEntity) {
        var pos;
        pos = {
          x: 0,
          y: 0
        };
        switch (this.facing) {
          case 'Up':
            pos.x = this.pos.x;
            pos.y = this.pos.y - weaponEntity.size.y;
            break;
          case 'Down':
            pos.x = this.pos.x;
            pos.y = this.pos.y + this.size.y;
            break;
          case 'Left':
            pos.x = this.pos.x - weaponEntity.size.x;
            pos.y = this.pos.y;
            break;
          case 'Right':
            pos.x = this.pos.x + this.size.x;
            pos.y = this.pos.y;
        }
        return pos;
      },
      loadLevelTrigger: function(other, trigger) {
        var desiredLevel;
        ig.music.stop();
        desiredLevel = (function() {
          switch (trigger.toLevel) {
            case 'Market1':
              ig.music.play('market');
              return LevelMarket1;
            case 'Forest1':
              ig.music.play('forest');
              return LevelForest1;
          }
        })();
        return ig.game.director.jumpTo(desiredLevel);
      }
    });
  });

}).call(this);
