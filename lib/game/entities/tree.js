// Generated by CoffeeScript 1.4.0
(function() {
  /*;

  var EntityTree;

  EntityTree = {};

  */;


  ig.module('game.entities.tree').requires('game.entities.common.static-entity', 'game.common.flasher').defines(function() {
    return EntityTree = EntityStaticEntity.extend({
      size: {
        x: 85,
        y: 55
      },
      offset: {
        x: 65,
        y: 155
      },
      collides: ig.Entity.COLLIDES.FIXED,
      type: ig.Entity.TYPE.A,
      animSheet: new ig.AnimationSheet('media/environment/tree.png', 220, 211),
      treeStrike: new ig.Sound('media/sounds/tree-strike.*'),
      treeFall: new ig.Sound('media/sounds/tree-fall.*'),
      dropLogChance: 75,
      flasher: null,
      particleOffset: 20,
      entityType: 'tree',
      init: function(x, y, settings) {
        this.flasher = new Flasher(this);
        return this.parent(x, y, settings);
      },
      receiveDamage: function(amount, from) {
        var x, y;
        this.flasher.startFlash();
        switch (from.facing) {
          case 'Up':
            x = from.pos.x;
            y = from.pos.y - this.particleOffset;
            break;
          case 'Down':
            x = from.pos.x;
            y = from.pos.y + from.size.y + this.particleOffset;
            break;
          case 'Right':
            x = from.pos.x + from.size.x + this.particleOffset;
            y = from.pos.y;
            break;
          case 'Left':
            x = from.pos.x - this.particleOffset;
            y = from.pos.y;
        }
        ig.game.spawnEntity(EntityParticleGenerator, x, y);
        if (this.health - amount > 0) {
          this.treeStrike.play();
        }
        return this.parent(amount, from);
      },
      kill: function() {
        this.treeFall.play();
        if ((Math.random() * 100) < this.dropLogChance) {
          ig.game.spawnEntity(EntityLog, (this.size.x - 25) / 2 + this.pos.x, (this.size.x - 25) / 2 + this.pos.y - 10);
        }
        return this.parent();
      },
      draw: function() {
        this.flasher.draw();
        return this.parent();
      }
    });
  });

}).call(this);
