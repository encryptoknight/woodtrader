// Generated by CoffeeScript 1.4.0
(function() {
  /*;

  var EntityDialog;

  EntityDialog = {};

  */;


  ig.module('game.entities.dialog').requires('game.entities.common.base-entity').defines(function() {
    return EntityDialog = EntityBaseEntity.extend({
      size: {
        x: 1,
        y: 1
      },
      collides: ig.Entity.COLLIDES.NEVER,
      animSheet: new ig.AnimationSheet('media/dialogs/dialog1.png', 112, 64),
      visible: false,
      font: new ig.Font('media/fonts/arial-12-normal-black.png'),
      text: ["I enjoy purchasing\nvarious species of\ntrees!"],
      currentPos: 0,
      padding: 5,
      cornerSize: {
        width: 4,
        height: 4
      },
      ctx: null,
      init: function(x, y, settings) {
        this.addAnim('idle', 1, [0]);
        this.ctx = ig.system.context;
        return this.parent(x, y, settings);
      },
      draw: function() {
        var height, i, paddedHeight, paddedWidth, startX, startY, width, _i, _j;
        if (!this.visible) {
          return;
        }
        startX = this.pos.x;
        startY = this.pos.y;
        width = this.font.widthForString(this.text[this.currentPos]);
        paddedWidth = width + (this.padding * 2);
        height = this.font.heightForString(this.text[this.currentPos]);
        paddedHeight = height + (this.padding * 2);
        this.animSheet.image.drawTile(startX, startY, 0, this.cornerSize.width);
        this.animSheet.image.drawTile(startX + this.cornerSize.width + paddedWidth, startY, 0, this.cornerSize.width, this.cornerSize.height, true);
        this.animSheet.image.drawTile(startX, startY + this.cornerSize.height + paddedHeight, 0, this.cornerSize.width, this.cornerSize.height, false, true);
        this.animSheet.image.drawTile(startX + this.cornerSize.width + paddedWidth, startY + this.cornerSize.height + paddedHeight, 0, this.cornerSize.width, this.cornerSize.height, true, true);
        for (i = _i = 0; 0 <= paddedWidth ? _i < paddedWidth : _i > paddedWidth; i = 0 <= paddedWidth ? ++_i : --_i) {
          this.animSheet.image.drawTile(startX + this.cornerSize.width + i, startY, 4, 1);
          this.animSheet.image.drawTile(startX + this.cornerSize.width + i, startY + paddedHeight + (this.cornerSize.height * 2), 4, 1);
        }
        for (i = _j = 0; 0 <= paddedHeight ? _j < paddedHeight : _j > paddedHeight; i = 0 <= paddedHeight ? ++_j : --_j) {
          this.animSheet.image.drawTile(startX, startY + this.cornerSize.height + i, 4, 1);
          this.animSheet.image.drawTile(startX + paddedWidth + (this.cornerSize.width * 2), startY + this.cornerSize.height + i, 4, 1);
        }
        this.drawRect(startX + this.cornerSize.width, startY + this.cornerSize.height, paddedWidth, paddedHeight);
        this.drawRect(startX + this.cornerSize.width, startY + 1, paddedWidth, this.cornerSize.height);
        this.drawRect(startX + this.cornerSize.width, startY + paddedHeight + this.cornerSize.height, paddedWidth, this.cornerSize.height);
        this.drawRect(startX + 1, startY + this.cornerSize.height, this.cornerSize.width, paddedHeight);
        this.drawRect(startX + paddedWidth + this.cornerSize.width, startY + this.cornerSize.height, this.cornerSize.width, paddedHeight);
        return this.font.draw(this.text[this.currentPos], startX + this.cornerSize.width + this.padding, startY + this.cornerSize.height + this.padding);
      },
      drawRect: function(x, y, width, height, fillColor) {
        if (fillColor == null) {
          fillColor = 'white';
        }
        this.ctx.beginPath();
        this.ctx.rect(x, y, width, height);
        this.ctx.fillStyle = fillColor;
        return this.ctx.fill();
      }
    });
  });

}).call(this);
